diff --git a/keystoneclient/adapter.py b/keystoneclient/adapter.py
index 3d65d78..f545e90 100644
--- a/keystoneclient/adapter.py
+++ b/keystoneclient/adapter.py
@@ -28,7 +28,7 @@ class Adapter(object):
     def __init__(self, session, service_type=None, service_name=None,
                  interface=None, region_name=None, endpoint_override=None,
                  version=None, auth=None, user_agent=None,
-                 connect_retries=None):
+                 connect_retries=None, global_request_id=None):
         """Create a new adapter.
 
         :param Session session: The session object to wrap.
@@ -57,6 +57,7 @@ class Adapter(object):
         self.user_agent = user_agent
         self.auth = auth
         self.connect_retries = connect_retries
+        self.global_request_id = global_request_id
 
     def _set_endpoint_filter_kwargs(self, kwargs):
         if self.service_type:
@@ -69,6 +70,9 @@ class Adapter(object):
             kwargs.setdefault('region_name', self.region_name)
         if self.version:
             kwargs.setdefault('version', self.version)
+        if self.global_request_id is not None:
+            kwargs.setdefault('headers', {}).setdefault(
+                "X-OpenStack-Request-ID", self.global_request_id)
 
     def request(self, url, method, **kwargs):
         endpoint_filter = kwargs.setdefault('endpoint_filter', {})
diff --git a/keystoneclient/httpclient.py b/keystoneclient/httpclient.py
index 7c1af06..a82bfaf 100644
--- a/keystoneclient/httpclient.py
+++ b/keystoneclient/httpclient.py
@@ -95,7 +95,7 @@ class HTTPClient(baseclient.Client, base.BaseAuthPlugin):
                  user_domain_id=None, user_domain_name=None, domain_id=None,
                  domain_name=None, project_id=None, project_name=None,
                  project_domain_id=None, project_domain_name=None,
-                 trust_id=None, session=None, **kwargs):
+                 trust_id=None, session=None, global_request_id=None, **kwargs):
         """Construct a new http client
 
         :param string user_id: User ID for authentication. (optional)
@@ -271,6 +271,8 @@ class HTTPClient(baseclient.Client, base.BaseAuthPlugin):
         self.stale_duration = stale_duration or access.STALE_TOKEN_DURATION
         self.stale_duration = int(self.stale_duration)
 
+        self.global_request_id = global_request_id
+
     def get_token(self, session, **kwargs):
         return self.auth_token
 
@@ -592,6 +594,10 @@ class HTTPClient(baseclient.Client, base.BaseAuthPlugin):
         except KeyError:
             pass
 
+        if self.global_request_id is not None:
+            kwargs.setdefault('headers', {}).setdefault(
+                "X-OpenStack-Request-ID", self.global_request_id)
+
         kwargs.setdefault('authenticated', False)
         resp = super(HTTPClient, self).request(url, method, **kwargs)
         return resp, self._decode_body(resp)
