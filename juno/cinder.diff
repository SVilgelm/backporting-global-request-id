diff --git a/cinder/api/middleware/auth.py b/cinder/api/middleware/auth.py
index 74d3afbbf..9731f6f9c 100644
--- a/cinder/api/middleware/auth.py
+++ b/cinder/api/middleware/auth.py
@@ -95,6 +95,7 @@ class CinderKeystoneContext(base_wsgi.Middleware):
         project_name = req.headers.get('X_TENANT_NAME')
 
         req_id = req.environ.get(request_id.ENV_REQUEST_ID)
+        global_req_id = req.environ.get(request_id.GLOBAL_REQ_ID)
 
         # Get the auth token
         auth_token = req.headers.get('X_AUTH_TOKEN',
@@ -121,7 +122,8 @@ class CinderKeystoneContext(base_wsgi.Middleware):
                                      auth_token=auth_token,
                                      remote_address=remote_address,
                                      service_catalog=service_catalog,
-                                     request_id=req_id)
+                                     request_id=req_id,
+                                     global_request_id=global_req_id)
 
         req.environ['cinder.context'] = ctx
         return self.application
diff --git a/cinder/compute/nova.py b/cinder/compute/nova.py
index c58f1055e..87c2cc9ea 100644
--- a/cinder/compute/nova.py
+++ b/cinder/compute/nova.py
@@ -105,7 +105,8 @@ def novaclient(context, admin=False):
                            auth_url=url,
                            insecure=CONF.nova_api_insecure,
                            cacert=CONF.nova_ca_certificates_file,
-                           extensions=extensions)
+                           extensions=extensions,
+                           global_request_id=context.global_id)
     # noauth extracts user_id:project_id from auth_token
     c.client.auth_token = context.auth_token or '%s:%s' % (context.user_id,
                                                            context.project_id)
diff --git a/cinder/context.py b/cinder/context.py
index 5a826891f..f65e10744 100644
--- a/cinder/context.py
+++ b/cinder/context.py
@@ -47,7 +47,7 @@ class RequestContext(object):
                  timestamp=None, request_id=None, auth_token=None,
                  overwrite=True, quota_class=None, service_catalog=None,
                  domain=None, user_domain=None, project_domain=None,
-                 **kwargs):
+                 global_request_id=None, **kwargs):
         """Initialize RequestContext.
 
         :param read_deleted: 'no' indicates deleted records are hidden, 'yes'
@@ -83,6 +83,7 @@ class RequestContext(object):
         if not request_id:
             request_id = generate_request_id()
         self.request_id = request_id
+        self.global_request_id = global_request_id
         self.auth_token = auth_token
         self.quota_class = quota_class
         if overwrite or not hasattr(local.store, 'context'):
@@ -97,6 +98,16 @@ class RequestContext(object):
             # if list is empty or none
             self.service_catalog = []
 
+    @property
+    def global_id(self):
+        """Return a sensible value for global_id to pass on.
+
+        When we want to make a call with to another service, it's
+        important that we try to use global_request_id if available,
+        and fall back to the locally generated request_id if not.
+        """
+        return self.global_request_id or self.request_id
+
     def _get_read_deleted(self):
         return self._read_deleted
 
@@ -135,6 +146,7 @@ class RequestContext(object):
                 'remote_address': self.remote_address,
                 'timestamp': timeutils.strtime(self.timestamp),
                 'request_id': self.request_id,
+                'global_request_id': self.global_request_id,
                 'auth_token': self.auth_token,
                 'quota_class': self.quota_class,
                 'service_catalog': self.service_catalog,
diff --git a/cinder/image/glance.py b/cinder/image/glance.py
index 16340d508..9e244ec93 100644
--- a/cinder/image/glance.py
+++ b/cinder/image/glance.py
@@ -79,6 +79,7 @@ def _create_glance_client(context, netloc, use_ssl,
     if version is None:
         version = CONF.glance_api_version
     params = {}
+    params['global_request_id'] = context.global_id
     if use_ssl:
         scheme = 'https'
         # https specific params
diff --git a/cinder/openstack/common/context.py b/cinder/openstack/common/context.py
index 09019ee38..154a08378 100644
--- a/cinder/openstack/common/context.py
+++ b/cinder/openstack/common/context.py
@@ -25,7 +25,7 @@ import uuid
 
 
 def generate_request_id():
-    return 'req-%s' % str(uuid.uuid4())
+    return b'req-' + str(uuid.uuid4()).encode('ascii')
 
 
 class RequestContext(object):
@@ -41,7 +41,7 @@ class RequestContext(object):
     def __init__(self, auth_token=None, user=None, tenant=None, domain=None,
                  user_domain=None, project_domain=None, is_admin=False,
                  read_only=False, show_deleted=False, request_id=None,
-                 instance_uuid=None):
+                 instance_uuid=None, global_request_id=None):
         self.auth_token = auth_token
         self.user = user
         self.tenant = tenant
@@ -55,6 +55,18 @@ class RequestContext(object):
         if not request_id:
             request_id = generate_request_id()
         self.request_id = request_id
+        self.global_request_id = global_request_id
+
+    @property
+    def global_id(self):
+        """Return a sensible value for global_id to pass on.
+
+        When we want to make a call with to another service, it's
+        important that we try to use global_request_id if available,
+        and fall back to the locally generated request_id if not.
+        """
+        return self.global_request_id or self.request_id
+
 
     def to_dict(self):
         user_idt = (
@@ -74,9 +86,26 @@ class RequestContext(object):
                 'show_deleted': self.show_deleted,
                 'auth_token': self.auth_token,
                 'request_id': self.request_id,
+                'global_request_id': self.global_request_id,
                 'instance_uuid': self.instance_uuid,
                 'user_identity': user_idt}
 
+    @classmethod
+    def from_dict(cls, ctx):
+        return cls(
+            auth_token=ctx.get("auth_token"),
+            user=ctx.get("user"),
+            tenant=ctx.get("tenant"),
+            domain=ctx.get("domain"),
+            user_domain=ctx.get("user_domain"),
+            project_domain=ctx.get("project_domain"),
+            is_admin=ctx.get("is_admin", False),
+            read_only=ctx.get("read_only", False),
+            show_deleted=ctx.get("show_deleted", False),
+            request_id=ctx.get("request_id"),
+            instance_uuid=ctx.get("instance_uuid"),
+            global_request_id=ctx.get("global_request_id"))
+
 
 def get_admin_context(show_deleted=False):
     context = RequestContext(None,
diff --git a/cinder/openstack/common/middleware/request_id.py b/cinder/openstack/common/middleware/request_id.py
index e7e415776..337a331bd 100644
--- a/cinder/openstack/common/middleware/request_id.py
+++ b/cinder/openstack/common/middleware/request_id.py
@@ -12,12 +12,7 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
-
-"""Middleware that ensures request ID.
-
-It ensures to assign request ID for each API request and set it to
-request environment. The request ID is also added to API response.
-"""
+import re
 
 import webob.dec
 
@@ -26,16 +21,45 @@ from cinder.openstack.common.middleware import base
 
 
 ENV_REQUEST_ID = 'openstack.request_id'
+GLOBAL_REQ_ID = 'openstack.global_request_id'
 HTTP_RESP_HEADER_REQUEST_ID = 'x-openstack-request-id'
+INBOUND_HEADER = 'X-Openstack-Request-Id'
+ID_FORMAT = (r'^req-[a-f0-9]{8}-[a-f0-9]{4}-'
+             r'[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$')
 
 
 class RequestIdMiddleware(base.Middleware):
+    """Middleware that ensures request ID.
+
+    It ensures to assign request ID for each API request and set it to
+    request environment. The request ID is also added to API response.
+    """
+
+    # if compat_headers is set, we also return the request_id in those
+    # headers as well. This allows projects like Nova to adopt
+    # oslo.middleware without impacting existing users.
+    compat_headers = []
+
+    def set_global_req_id(self, req):
+        gr_id = req.headers.get(INBOUND_HEADER, "")
+        if re.match(ID_FORMAT, gr_id):
+            req.environ[GLOBAL_REQ_ID] = gr_id
+            # TODO(sdague): it would be nice to warn if we dropped a bogus
+            # request_id, but the infrastructure for doing that isn't yet
+            # setup at this stage.
 
     @webob.dec.wsgify
     def __call__(self, req):
+        self.set_global_req_id(req)
+
         req_id = context.generate_request_id()
         req.environ[ENV_REQUEST_ID] = req_id
         response = req.get_response(self.application)
-        if HTTP_RESP_HEADER_REQUEST_ID not in response.headers:
-            response.headers.add(HTTP_RESP_HEADER_REQUEST_ID, req_id)
+
+        return_headers = [HTTP_RESP_HEADER_REQUEST_ID]
+        return_headers.extend(self.compat_headers)
+
+        for header in return_headers:
+            if header not in response.headers:
+                response.headers.add(header, req_id)
         return response
